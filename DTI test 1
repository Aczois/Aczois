-- VERSION 2.2
-- FIXED SOME HAIR INCOMPATIBILITY AND ADDED SAVE OUTFIT

loadstring(game:HttpGet("https://raw.githubusercontent.com/hellohellohell012321/discordpopup/main/discord-popup",true))()

-- formatting: 3 line breaks between buttons, 5 between tabs
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/shidemuri/scripts/main/ui_lib.lua"))() -- defining the gui library

local Pendulum = Library:New("dress to impress fucker")






local Exploit1 = Pendulum:NewTab("exploits")



Exploit1:NewButton("toggle rainbow skin", "makes your skin flash rainbow", function()

-- original script is from https://pastebin.com/bKmeynqv

getgenv().lmao = not getgenv().lmao
task.spawn(function()
    while true do
        task.wait()
        if not getgenv().lmao then
            break
        end
        local args = {
            [1] = "Change Skintone",
            [2] = Color3.new(math.random(), math.random(), math.random())
        }
    
        game:GetService("ReplicatedStorage"):WaitForChild("Dress Up"):WaitForChild("RemoteEvent"):FireServer(unpack(args))
    end
end)

end)



Exploit1:NewButton("obstruct camera/runway", "gives you a ton of hair to block others on the runway", function()
loadstring(game:HttpGet("https://pastefy.app/KjfFN9Wh/raw",true))() -- hair

local x = "-229"
local y = "16"
local z = "-409"
local P = game.Players.LocalPlayer.Character.HumanoidRootPart
P.CFrame = CFrame.new(x, y, z)

end)



Exploit1:NewButton("autofarm money", "all money that spawns will be remotely collected", function()

while wait(2) do
    
local MoneyFolder = workspace.CollectibleMoney.Money
if MoneyFolder then
    local player = game.Players.LocalPlayer
    local humanoidRootPart = player.Character and player.Character:FindFirstChild("HumanoidRootPart")

    if humanoidRootPart then
        for _, moneyPart in ipairs(MoneyFolder:GetChildren()) do
            if moneyPart:IsA("BasePart") then
                local doge = game:GetService("Players").LocalPlayer.Character or game:GetService("Players").LocalPlayer.CharacterAdded:Wait()
local cheems = doge:FindFirstChildWhichIsA("BasePart")

firetouchinterest(moneyPart,cheems,0)
firetouchinterest(moneyPart,cheems,1) 
            end
        end
    else
        warn("Player's HumanoidRootPart not found!")
    end
else
    warn("Money folder not found in workspace!")
end

end

end)





local Exploit2 = Pendulum:NewTab("better exploits")



Exploit2:NewButton("unlock all items", "click anything to equip, this also destroys vip door and purchase prompts", function()
    
    
    
    
local userInputService = game:GetService("UserInputService")
local camera = workspace.CurrentCamera
local replicatedStorage = game:GetService("ReplicatedStorage")

local function onClick(input, gameProcessedEvent)
    if gameProcessedEvent then
        return
    end

    -- Check for mouse click or touch input
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        local mousePosition = input.Position
        local ray = camera:ScreenPointToRay(mousePosition.X, mousePosition.Y)
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Blacklist -- Ignore players' characters
        raycastParams.FilterDescendantsInstances = {workspace:FindFirstChildOfClass("Players")}
        raycastParams.IgnoreWater = true

        local raycastResult = workspace:Raycast(ray.Origin, ray.Direction * 1000, raycastParams)

        if raycastResult then
            local hitObject = raycastResult.Instance
            print("Raycast hit: " .. tostring(hitObject))
            if hitObject:IsA("Part") then
                local parentOfClickedObject = hitObject.Parent
                print("Clicked on model: " .. hitObject.Name)
                print("Parent of clicked object: " .. parentOfClickedObject.Name)
                
                local args = {
                    [1] = "Equip",
                    [2] = parentOfClickedObject.Name
                }

                local remoteEvent = replicatedStorage:WaitForChild("Dress Up"):WaitForChild("RemoteEvent")
                remoteEvent:FireServer(unpack(args))
            else
                print("Hit object is not a model: " .. hitObject.Name)
            end
        else
            print("Raycast did not hit anything.")
        end
    end
end

userInputService.InputBegan:Connect(onClick)




workspace["VIP Door"].Part:Destroy()
game:GetService("CoreGui").PurchasePrompt:Destroy()
game.Players.LocalPlayer.PlayerGui.Shopping:Destroy()



end)



local copyoutfit = Exploit2:NewTextBar("user/display name (can shorten)", "user/display name (can shorten)", "", function()
    end)
    


Exploit2:NewButton("copy outfit", "copy the outfit of player above (wont copy patterns)", function()



loadstring(game:HttpGet("https://pastefy.app/lMNQKGxK/raw",true))() -- clear

wait(0.01)

-- get the player

local Players = game:GetService("Players")

local function findPlayer(input)
    local inputLower = string.lower(input)

    for _, player in ipairs(Players:GetPlayers()) do
        local displayName = player.DisplayName
        local username = player.Name

        -- Check full display name
        if string.lower(displayName) == inputLower then
            return player
        end

        -- Check shortened display name
        for i = 1, #displayName do
            if string.lower(string.sub(displayName, 1, i)) == inputLower then
                return player
            end
        end

        -- Check full username
        if string.lower(username) == inputLower then
            return player
        end

        -- Check shortened username
        for i = 1, #username do
            if string.lower(string.sub(username, 1, i)) == inputLower then
                return player
            end
        end
    end

    return nil
end

-- Example usage
local input = copyoutfit.Text  -- Replace with the input you want to search for
local foundPlayer = findPlayer(input)

if foundPlayer then
    print("Found player: " .. foundPlayer.Name)
else
    print("Player not found")
end




-- Function to convert Color3 to hex with lowercase letters
local function colorToHex(color)
    return string.format("%02x%02x%02x", math.floor(color.R * 255), math.floor(color.G * 255), math.floor(color.B * 255))
end

-- Get the player and their EquippedAccessories folder
local playerName = foundPlayer.Name
local player = workspace:FindFirstChild(playerName)

if player then
    print("Player found: " .. playerName)
    
    local equippedAccessories = player:FindFirstChild("EquippedAccessories")
    if equippedAccessories then
        print("EquippedAccessories folder found for player: " .. playerName)
        
        for _, item in ipairs(equippedAccessories:GetChildren()) do
            -- Print the item name
            print("Item found: " .. item.Name)

            -- Prepare the arguments for the first RemoteEvent (Equip)
            local equipArgs = {
                [1] = "Equip",
                [2] = item.Name
            }

            -- Fire the first RemoteEvent (Equip)
            game:GetService("ReplicatedStorage"):WaitForChild("Dress Up"):WaitForChild("RemoteEvent"):FireServer(unpack(equipArgs))
            print("RemoteEvent (Equip) fired with args: ")
            print("local args = {")
            print("    [1] = \"" .. equipArgs[1] .. "\",")
            print("    [2] = \"" .. equipArgs[2] .. "\"")
            print("}")
            
            -- Find the first folder within the item
            local firstFolder = nil
            for _, child in ipairs(item:GetChildren()) do
                if child:IsA("Folder") then
                    firstFolder = child
                    break
                end
            end
            
            if firstFolder then
                print("Folder found for item: " .. item.Name .. ", Folder name: " .. firstFolder.Name)
                -- Iterate through parts 1 to 5 in the folder
                for partNumber = 1, 5 do
                    local part = firstFolder:FindFirstChild(tostring(partNumber))
                    if part then
                        -- Use the part's Color directly
                        local color = part.Color

                        -- Prepare the arguments for the first RemoteEvent (Color Accessory)
                        local colorArgs = {
                            [1] = "Color Accessory",
                            [2] = item.Name,
                            [3] = tostring(partNumber),
                            [4] = Color3.new(color.R, color.G, color.B)
                        }

                        -- Print the exact RemoteEvent code for debugging
                        print("RemoteEvent (Color Accessory) fired with args: ")
                        print("local args = {")
                        print("    [1] = \"" .. colorArgs[1] .. "\",")
                        print("    [2] = \"" .. colorArgs[2] .. "\",")
                        print("    [3] = \"" .. colorArgs[3] .. "\",")
                        print("    [4] = Color3.new(" .. colorArgs[4].R .. ", " .. colorArgs[4].G .. ", " .. colorArgs[4].B .. ")")
                        print("}")

                        -- Fire the first RemoteEvent (Color Accessory)
                        game:GetService("ReplicatedStorage"):WaitForChild("Dress Up"):WaitForChild("RemoteEvent"):FireServer(unpack(colorArgs))
                        print("RemoteEvent (Color Accessory) fired for item: " .. item.Name .. ", part: " .. partNumber)
                        
                        -- If the item name contains "hair", fire the RemoteEvent again with hex color
                        if string.find(string.lower(item.Name), "hair") then
                            local hexColor = colorToHex(color)
                            local hexColorArgs = {
                                [1] = "ColoringViaTexture",
                                [2] = item.Name,
                                [3] = tostring(partNumber),
                                [4] = hexColor
                            }

                            -- Print the exact RemoteEvent code for debugging
                            print("RemoteEvent (Color Accessory with hex) fired with args: ")
                            print("local args = {")
                            print("    [1] = \"" .. hexColorArgs[1] .. "\",")
                            print("    [2] = \"" .. hexColorArgs[2] .. "\",")
                            print("    [3] = \"" .. hexColorArgs[3] .. "\",")
                            print("    [4] = \"" .. hexColorArgs[4] .. "\"")
                            print("}")

                            -- Fire the second RemoteEvent (Color Accessory) with hex color
                            game:GetService("ReplicatedStorage"):WaitForChild("Dress Up"):WaitForChild("RemoteEvent"):FireServer(unpack(hexColorArgs))
                            print("RemoteEvent (Color Accessory with hex) fired for item: " .. item.Name .. ", part: " .. partNumber)
                        end
                    else
                        print("No part found with name: " .. tostring(partNumber) .. " in folder of item: " .. item.Name)
                    end
                end
            else
                warn("No folder found for item: " .. item.Name)
            end
        end
    else
        warn("EquippedAccessories folder not found for player: " .. playerName)
    end
    
    -- Get the player's head part and change the skintone
    local head = player:FindFirstChild("Head")
    if head then
        local headColor = head.Color

        local skinToneArgs = {
            [1] = "Change Skintone",
            [2] = Color3.new(headColor.R, headColor.G, headColor.B)
        }

        -- Print the exact RemoteEvent code for debugging
        print("RemoteEvent (Change Skintone) fired with args: ")
        print("local args = {")
        print("    [1] = \"" .. skinToneArgs[1] .. "\",")
        print("    [2] = Color3.new(" .. skinToneArgs[2].R .. ", " .. skinToneArgs[2].G .. ", " .. skinToneArgs[2].B .. ")")
        print("}")

        -- Fire the RemoteEvent (Change Skintone)
        game:GetService("ReplicatedStorage"):WaitForChild("Dress Up"):WaitForChild("RemoteEvent"):FireServer(unpack(skinToneArgs))
        print("RemoteEvent (Change Skintone) fired for player: " .. playerName .. ", Head color: " .. tostring(headColor))
        
        -- Get the player's face decal and change its texture
        local face = head:FindFirstChild("face")
        if face and face:IsA("Decal") then
            local faceTexture = face.Texture

            local faceArgs = {
                [1] = "Classic Makeup",
                [2] = faceTexture
            }

            -- Print the exact RemoteEvent code for debugging
            print("RemoteEvent (Classic Makeup) fired with args: ")
            print("local args = {")
            print("    [1] = \"" .. faceArgs[1] .. "\",")
            print("    [2] = \"" .. faceArgs[2] .. "\"")
            print("}")

            -- Fire the RemoteEvent (Classic Makeup)
            game:GetService("ReplicatedStorage"):WaitForChild("Dress Up"):WaitForChild("RemoteEvent"):FireServer(unpack(faceArgs))
            print("RemoteEvent (Classic Makeup) fired for player: " .. playerName .. ", Face texture: " .. faceTexture)
        else
            warn("Face decal not found for player: " .. playerName)
        end
    else
        warn("Head part not found for player: " .. playerName)
    end

    -- Get the Nails accessory and find part '1'
    local nails = player:FindFirstChild("Nails")
    if nails then
        local part1 = nails:FindFirstChild("1")
        if part1 then
            local part1Color = part1.Color

            local nailsColorArgs = {
                [1] = "Color Accessory",
                [2] = "Nails",
                [3] = "1",
                [4] = Color3.new(part1Color.R, part1Color.G, part1Color.B)
            }

            -- Print the exact RemoteEvent code for debugging
            print("RemoteEvent (Color Accessory for Nails) fired with args: ")
            print("local args = {")
            print("    [1] = \"" .. nailsColorArgs[1] .. "\",")
            print("    [2] = \"" .. nailsColorArgs[2] .. "\",")
            print("    [3] = \"" .. nailsColorArgs[3] .. "\",")
            print("    [4] = Color3.new(" .. nailsColorArgs[4].R .. ", " .. nailsColorArgs[4].G .. ", " .. nailsColorArgs[4].B .. ")")
            print("}")

            -- Fire the RemoteEvent (Color Accessory for Nails)
            game:GetService("ReplicatedStorage"):WaitForChild("Dress Up"):WaitForChild("RemoteEvent"):FireServer(unpack(nailsColorArgs))
            print("RemoteEvent (Color Accessory for Nails) fired for Nails part '1', Color: " .. tostring(part1Color))
        else
            warn("Part '1' not found in Nails accessory for player: " .. playerName)
        end
    else
        warn("Nails accessory not found for player: " .. playerName)
    end
else
    warn("Player not found: " .. playerName)
end






end)



local face = Exploit2:NewTextBar("asset id for your face", "asset id for your face", "", function()
    end)
    


Exploit2:NewButton("apply to face", "places the asset id from above onto your face", function()
    
    
local assetId = face.Text

local args = {
    [1] = "Classic Makeup",
    [2] = "http://www.roblox.com/asset/?id=" .. assetId
}

game:GetService("ReplicatedStorage"):WaitForChild("Dress Up"):WaitForChild("RemoteEvent"):FireServer(unpack(args))


end)



Exploit2:NewLabel("wanna know how to get image IDs? join our discord!")



Exploit2:NewButton("save current outfit", "copies your outfit to your clipboard in form of code", function()

local function colorToHex(color)
    return string.format("%02x%02x%02x", math.floor(color.R * 255), math.floor(color.G * 255), math.floor(color.B * 255))
end

-- Create a table to store all remote event calls
local outfitfinal = {}

-- Helper function to add remote events to the table
local function addRemoteEvent(remoteName, args)
    table.insert(outfitfinal, string.format(
        'game:GetService("ReplicatedStorage"):WaitForChild("Dress Up"):WaitForChild("RemoteEvent"):FireServer(%s)',
        table.concat(args, ", ")
    ))
end

-- Helper function to serialize the outfitfinal table into a string
local function serializeTable(tbl)
    return table.concat(tbl, "\n")
end

-- Get the player and their EquippedAccessories folder
local playerName = game.Players.LocalPlayer.Name
local player = workspace:FindFirstChild(playerName)

if player then
    print("Player found: " .. playerName)
    
    local equippedAccessories = player:FindFirstChild("EquippedAccessories")
    if equippedAccessories then
        print("EquippedAccessories folder found for player: " .. playerName)
        
        for _, item in ipairs(equippedAccessories:GetChildren()) do
            -- Print the item name
            print("Item found: " .. item.Name)

            -- Prepare the arguments for the first RemoteEvent (Equip)
            local equipArgs = {
                string.format('"%s"', "Equip"),
                string.format('"%s"', item.Name)
            }

            -- Add the Equip RemoteEvent to the table
            addRemoteEvent("Equip", equipArgs)
            
            -- Find the first folder within the item
            local firstFolder = nil
            for _, child in ipairs(item:GetChildren()) do
                if child:IsA("Folder") then
                    firstFolder = child
                    break
                end
            end
            
            if firstFolder then
                print("Folder found for item: " .. item.Name .. ", Folder name: " .. firstFolder.Name)
                -- Iterate through parts 1 to 5 in the folder
                for partNumber = 1, 5 do
                    local part = firstFolder:FindFirstChild(tostring(partNumber))
                    if part then
                        -- Use the part's Color directly
                        local color = part.Color

                        -- Prepare the arguments for the first RemoteEvent (Color Accessory)
                        local colorArgs = {
                            string.format('"%s"', "Color Accessory"),
                            string.format('"%s"', item.Name),
                            string.format('"%s"', tostring(partNumber)),
                            string.format('Color3.new(%f, %f, %f)', color.R, color.G, color.B)
                        }

                        -- Add the Color Accessory RemoteEvent to the table
                        addRemoteEvent("Color Accessory", colorArgs)

                        -- If the item name contains "hair", fire the RemoteEvent again with hex color
                        if string.find(string.lower(item.Name), "hair") then
                            local hexColor = colorToHex(color)
                            local hexColorArgs = {
                                string.format('"%s"', "ColoringViaTexture"),
                                string.format('"%s"', item.Name),
                                string.format('"%s"', tostring(partNumber)),
                                string.format('"%s"', hexColor)
                            }

                            -- Add the hex color RemoteEvent to the table
                            addRemoteEvent("ColoringViaTexture", hexColorArgs)
                        end
                    else
                        print("No part found with name: " .. tostring(partNumber) .. " in folder of item: " .. item.Name)
                    end
                end
            else
                warn("No folder found for item: " .. item.Name)
            end
        end
    else
        warn("EquippedAccessories folder not found fo
